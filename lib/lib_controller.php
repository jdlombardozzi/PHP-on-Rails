<?php
class Controller
{
  public $variables = array('errors' => array());
  public $application;
  public $router;

  // Controller initializer will store a reference to the application
  function __construct($application, $router)
  {
    $this->application = &$application;
    $this->router = &$router;

    require_once(BASEDIR.'lib/flash.php');
    $this->variables['flash'] = new Flash();
  }

  // Any property set within an extended Controller's methods will be added to $this->variables
  public function __set($name, $value)
  {
    $this->variables[$name] = $value;
  }

  // Any property accessed within an extended Controller's methods or coordinating views will go through this getter
  // It will first check if the model has this property, else it will check $this->variables
  public function __get($name)
  {
    # Check if we have
//    print $name;
//    if (property_exists($this->application->model_objects, $name)) {
//      return $this->application->model_objects->$name;
//    }

    return $this->variables[$name];
  }

  // Any Controller function call will be run this call method
  public function __call($name, $arguments)
  {
    # Check if method exists and raise exception if it doesn't.
    if (!method_exists($this, $name)){
      throw new BadMethodCallException(get_class($this).'#'.$name.' does not exist  ');
    }

    return call_user_func_array(array(&$this, $name), $arguments);
  }

  // TODO: Array - The URL will be generated from routing stuff.
  // TODO: Record - The URL will be generated by calling url_for with the options, which will reference a named URL for that record.
  // String starting with protocol:// (like http://) - Is passed straight through as the target for redirection.
  // String not containing a protocol or host - The app base url is prepended to the string.
  // back - Back to the page that issued the request. Useful for forms that are triggered from multiple places.
  public function redirect_to($arguments) {
    $url = null;

    if (is_array($arguments) ) {
      // Check for module, controller, action, etc.
    } elseif (is_string($arguments) && $arguments == 'back') {
      $url = $_SERVER['HTTP_REFERER'];
    } elseif (is_string($arguments)) {
      // Try to determine path
      $parsed_url = parse_url($arguments);

      // If we have protocol, success redirect to it.
      if (isset($parsed_url['protocol']) || isset($parsed_url['host']) ) {
        $url = $arguments;
      } else {
        $url = $this->base_url . ltrim($arguments,'/');
      }
    } else {
      throw new InvalidArgumentException('Controller->redirect_to is expecting an array or string');
    }

    header("Location: {$url}", true, 302);
    exit;
  }

  // TODO: Still working on this.
  public function render($context, $options=array()) {
    // TODO: Normalize arguments/options

    require_once BASEDIR.'lib/lib_view.php';
    $view_object = new View($this);

    $view_object->content_for('layout', $view_object->render("{$context}.phtml"));

    // Render and output the display.
    // TODO: Layout overrides
    echo $view_object->render("{$this->router->module_path}layouts/application.phtml");
    exit;
  }
}